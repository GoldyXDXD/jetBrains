package contacts;

import java.util.ArrayList;
import java.time.LocalDate;
import java.util.Scanner;
import java.time.LocalDateTime;

public class Main {
    public static void main(String[] args) {
        Contacts contacts = new Contacts();
        Contacts utilityList = new Contacts();
        int count = 1;
        Scanner scanner = new Scanner(System.in);
        String inputAction, typeContact,name, surname, address, birthday, gender,phoneNumber, field, value;
        int numberRecord;
        do {
            showMenu();
            inputAction = scanner.nextLine();
            switch (inputAction) {
                case "add":
                    System.out.print("Enter the type (person, organization): > ");
                    typeContact = scanner.nextLine();
                    if ("person".equals(typeContact)) {
                        System.out.print("Enter the name: > ");
                        name = scanner.nextLine();
                        System.out.print("Enter the surname: > ");
                        surname = scanner.nextLine();
                        System.out.print("Enter the birth date: > ");
                        birthday = checkDate(scanner.nextLine());
                        System.out.print("Enter the gender (M, F): > ");
                        gender = checkGender(scanner.nextLine());
                        System.out.print("Enter the number: > ");
                        phoneNumber = scanner.nextLine();
                        contacts.add(count, name, surname, phoneNumber, birthday, gender);
                        count++;
                        System.out.println("The record added.\n");
                    } else if ("organization".equals(typeContact)) {
                        System.out.print("Enter the organization name: > ");
                        name = scanner.nextLine();
                        System.out.print("Enter the address: > ");
                        address = scanner.nextLine();
                        System.out.print("Enter the number: > ");
                        phoneNumber = scanner.nextLine();
                        contacts.add(count, name, address, phoneNumber);
                        count++;
                        System.out.println("The record added.\n");
                    }
                    break;
                case "search":
                    search(contacts, utilityList, scanner);
                    utilityList.list();
                    
                    break;
                case "count":
                    System.out.println("The Phone Book has " + contacts.count() + " records.");
                    break;
                case "list":
                    contacts.list();
                    System.out.print("[list] Enter action ([number], back): > ");
                    String str = scanner.nextLine();
                    switch (str) {
                        case "back":
                            break;
                        case "[//d+]":
                            contacts.info(Integer.parseInt(str));
                            record(Integer.parseInt(str), scanner, contacts);
                            break;
                    }
                    numberRecord = Integer.parseInt(scanner.nextLine());
                    contacts.info(numberRecord);

                    break;
            }

        }
        while (!inputAction.equals("exit"));



    }
    static String checkDate(String date) {
        if (date.isEmpty() || LocalDate.parse(date) == null) {
            System.out.println("Bad birth date!");
            return "[no data]";
        } else {
            return date;
        }

    }
    static String  checkGender(String gender) {
        if ("M".equals(gender) || "F".equals(gender)) {
            return gender;
        } else {
            System.out.println("Bad gender!");
            return "[no data]";
        }
    }
    public static void showMenu() {
        System.out.print("[menu] Enter action (add, list, search, count, exit): > ");
    }
    public static void record(int num, Scanner scanner, Contacts contacts) {
        System.out.print("[record] Enter action (edit, delete, menu): > ");
        switch (scanner.nextLine()) {
            case "edit":
                if (contacts.isPerson(num)) {
                    System.out.print("Select a field (name, surname, birth, gender, number): > ");
                } else {
                    System.out.print("Select a field (organization name, address, number): > ");
                }

                String field = scanner.nextLine();
                String value = "";
                if (!field.isEmpty()) {
                    System.out.print("Enter " + field + ": > ");
                    value = scanner.nextLine();
                    contacts.edit(num - 1, field, value);
                    System.out.println("The record updated!\n");
                }
                record(num, scanner, contacts);
                break;
            case "delete":
                contacts.remove(num);
                record(num, scanner, contacts);
                break;
            case "menu":
                break;
        }
    }
    public static void search(Contacts contacts, Contacts list, Scanner scanner) {
        System.out.print("Enter search query: > ");
        String query = scanner.nextLine();
        for (int i = 0; i <= contacts.count(); i++) {
            String str = "";
            contacts.getLine(i, str);
            if (str.matches(query)) {
                list.add(contacts.getContact(i));
            }
        }

    }
}


class Contact {
    protected int id;
    protected String phoneNumber;
    protected LocalDateTime created;
    protected LocalDateTime lastEdit;

    Contact (String phoneNumber, int count) {
        this.id = count;
        this.phoneNumber = checkPhoneNumber(phoneNumber);
        this.created = LocalDateTime.now();
        this.lastEdit = LocalDateTime.now();
    }


    protected String checkPhoneNumber (String phoneNumber) {
        if (phoneNumber.isEmpty()) {
            return "[no number]";
        }
        else if (phoneNumber.matches("\\+?((\\(\\w+\\)([\\s-]\\w{2,})?)|(\\w+([\\s-]\\(\\w{2,}\\))?))([\\s-]\\w{2,}){0,3}")) {
            return phoneNumber;
        }
        else {
            System.out.println("Wrong number format!");
            return "[no number]";
        }
    }

    void info() {
        System.out.println("Number: " + phoneNumber);
        System.out.println("Time created: " + created);
        System.out.println("Time last edit: " + lastEdit + "\n") ;
    }

    String getFullName() {
        return null;
    }

    public int getId() {
        return id;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = checkPhoneNumber(phoneNumber);
    }

    public LocalDateTime getCreated() {
        return created;
    }

    public void setCreated(LocalDateTime created) {
        this.created = created;
    }

    public LocalDateTime getLastEdit() {
        return lastEdit;
    }

    public void setLastEdit(LocalDateTime lastEdit) {
        this.lastEdit = lastEdit;
    }

    public boolean isPerson() {
        return this.getClass() == Person.class;
    }
    protected void updateDate () {
        this.lastEdit = LocalDateTime.now();
    }
}
class Person extends Contact {
    private String name;
    private String surname;
    private String birthday;
    private String gender;


    Person (int count, String name,String surname, String phoneNumber, String birthday, String gender) {
        super(phoneNumber, count);
        this.name = name;
        this.surname = surname;
        this.birthday = birthday;
        this.gender = gender;
    }

    @Override
    void info() {
        System.out.println("Name: " + name);
        System.out.println("Surname: " + surname);
        System.out.println("Birth date: " + birthday);
        System.out.println("Gender: " + gender);
        super.info();
    }

    @Override
    String getFullName() {
        return name + " " +surname;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = checkPhoneNumber(name);
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public boolean hasPhoneNumber() {
        return !phoneNumber.isEmpty();
    }


    public String getBirthday() {
        return birthday;
    }

    public void setBirthday(String birthday) {
        this.birthday = birthday;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }
}
class Organization extends Contact{
    private String name;
    private String address;

    Organization (int count, String name, String address, String phoneNumber) {
        super(phoneNumber, count);
        this.name = name;
        this.address = address;


    }
    @Override
    void info() {
        System.out.println("Organization name: " + name);
        System.out.println("Address: " + address);
        super.info();
    }

    @Override
    String getFullName() {
        return name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }
}


class Contacts {
    private ArrayList<Contact> contacts = new ArrayList<>();

    public void add (int id, String name, String surname, String phoneNumber, String birthday, String gender) {
        Contact contact = new Person(id, name, surname,phoneNumber, birthday, gender);
        contacts.add(contact);
    }
    public void add (int id, String name, String address, String phoneNumber) {
        Contact contact = new Organization(id, name, address, phoneNumber);
        contacts.add(contact);
    }
    public void add(Contact contact) {
        contacts.add(contact);
    }
    public void remove(int i) {
        contacts.remove(i);
    }
    public void edit(int i, String field, String value) {
        if (contacts.get(i).isPerson()) {
            Person person = (Person) contacts.get(i);
            switch (field) {
                case "name":
                    person.setName(value);
                    break;
                case "surname":
                    person.setSurname(value);
                    break;
                case "birth":
                    person.setBirthday(value);
                    break;
                case "gender":
                    person.setGender(value);
                    break;
                case "number":
                    person.setPhoneNumber(value);
                    break;
            }
        } else {
            Organization organization = (Organization) contacts.get(i);
            switch (field) {
                case "organization name":
                    organization.setName(value);
                    break;
                case "address":
                    organization.setAddress(value);
                    break;
                case "number":
                    organization.setPhoneNumber(value);
                    break;
            }
        }

    }

    public void info (int index) {
        contacts.get(index - 1).info();
    }
    public void list (){
        for (int i = 0; i < count(); i++) {
            System.out.println(i + 1 + ". " + contacts.get(i).getFullName());
        }
    }

    public Contact getContact(int i) {
        return contacts.get(i);
    }

    public void getLine(int i, String str) {
        str += contacts.get(i).getFullName() + " " + contacts.get(i).getPhoneNumber();
    }
    public int count () {
        return contacts.size();
    }
    public boolean isPerson (int i) {
        return contacts.get(i - 1).isPerson();
    }
}
